{"ast":null,"code":"var _jsxFileName = \"/Users/bhanu/Desktop/Registration/src/components/Address.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport PlacesAutocomplete from 'react-places-autocomplete';\nimport { Button } from '../components/Button';\nimport { saveValues } from '../actions';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Address = props => {\n  _s();\n\n  const {\n    Address = '',\n    saveFormValues\n  } = props;\n  const [place, setPlace] = useState(Address);\n  const history = useHistory();\n\n  const handleChange = async value => {\n    setPlace(value);\n    saveFormValues({\n      Address: value\n    });\n  };\n\n  const onSubmit = () => {\n    history.push('/Confirmation');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'absolute',\n      left: '50%',\n      top: '50%',\n      transform: 'translate(-50%, -50%)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"We need this last piece of information before you submit this form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      style: {\n        PaddingRight: '10px',\n        fontSize: '24px'\n      },\n      children: \"Address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n        value: place,\n        onChange: setPlace,\n        onSelect: handleChange,\n        children: ({\n          getInputProps,\n          suggestions,\n          getSuggestionItemProps,\n          loading\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              fontSize: '24px'\n            },\n            name: \"Address\",\n            ...getInputProps({\n              placeholder: 'Enter your place...'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 33\n            }, this), suggestions.map(suggestion => {\n              const style = suggestion.active ? {\n                backgroundColor: '#d9d9f3',\n                cursor: 'pointer'\n              } : {\n                backgroundColor: '#ffffff',\n                cursor: 'pointer'\n              };\n              return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                  style\n                }),\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: suggestion.description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 49,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 25\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Button, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Address, \"zeNxParAjYwj/7HDj1oQGOpfPss=\", false, function () {\n  return [useHistory];\n});\n\n_c = Address;\n\nconst mapStateToProps = state => {\n  const {\n    Address\n  } = state.values.formValues;\n  return {\n    Address\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    saveFormValues: values => {\n      dispatch(saveValues(values));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Address);\n\nvar _c;\n\n$RefreshReg$(_c, \"Address\");","map":{"version":3,"sources":["/Users/bhanu/Desktop/Registration/src/components/Address.jsx"],"names":["React","useState","useHistory","PlacesAutocomplete","Button","saveValues","connect","Address","props","saveFormValues","place","setPlace","history","handleChange","value","onSubmit","push","position","left","top","transform","PaddingRight","fontSize","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","style","active","backgroundColor","cursor","description","mapStateToProps","state","values","formValues","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport { useHistory } from 'react-router';\nimport PlacesAutocomplete from 'react-places-autocomplete';\nimport {Button} from '../components/Button';\nimport { saveValues } from '../actions';\nimport { connect } from 'react-redux';\n\nconst Address = (props) => {\n    const {Address = '' , saveFormValues} = props;\n    const [place, setPlace] = useState(Address);\n\n    const history = useHistory();\n    const handleChange = async value => {\n        setPlace(value);\n        saveFormValues({Address: value})\n    }\n    const onSubmit = () => {\n        history.push('/Confirmation')\n    }\n    \n    return (\n            <div style={{\n                position: 'absolute', left: '50%', top: '50%',\n                transform: 'translate(-50%, -50%)'\n            }}>\n            <h1>We need this last piece of information before you submit this form</h1>\n            <label style = {{PaddingRight:'10px', fontSize: '24px'}}>Address</label>\n            <form onSubmit={onSubmit}>\n           <PlacesAutocomplete value={place} onChange={setPlace} onSelect={handleChange}>\n           {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n            <div >\n                <input style = {{fontSize: '24px'}} name='Address'\n                {...getInputProps({\n                    placeholder: 'Enter your place...',\n                })}\n                />\n                <div>\n                    {loading && <div>Loading...</div>}\n                    {suggestions.map(suggestion => {\n                        const style = suggestion.active\n                        ? { backgroundColor: '#d9d9f3', cursor: 'pointer' }\n                        : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                    return (\n                        <div\n                            {...getSuggestionItemProps(suggestion, {\n                            style,\n                            })}\n                        >\n                            <span>{suggestion.description}</span>\n                        </div>\n                        );\n                    })}\n                </div>\n            </div>\n           )}\n            </PlacesAutocomplete> \n            <div>\n              <Button/>\n            </div>\n            </form>\n            </div>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    const { Address } = state.values.formValues;\n    return {\n        Address\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n      saveFormValues : (values) => {\n        dispatch(saveValues(values));\n      }\n    }\n  }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Address);"]},"metadata":{},"sourceType":"module"}